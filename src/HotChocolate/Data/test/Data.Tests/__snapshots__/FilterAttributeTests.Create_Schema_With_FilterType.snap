schema {
  query: Query1
}

type Foo {
  bar: String!
  baz: Int!
  qux: Int
}

type Query1 {
  foos(where: FooFilter): [Foo!]!
}

input ComparableOperationInputOfInt32Filter {
  eq: Int!
  gt: Int!
  gte: Int!
  in: Int!
  lt: Int!
  lte: Int!
  neq: Int!
  ngt: Int!
  ngte: Int!
  nin: Int!
  nlt: Int!
  nlte: Int!
}

input ComparableOperationInputOfInt64Filter {
  eq: Long!
  gt: Long!
  gte: Long!
  in: Long!
  lt: Long!
  lte: Long!
  neq: Long!
  ngt: Long!
  ngte: Long!
  nin: Long!
  nlt: Long!
  nlte: Long!
}

input FooFilter {
  and: [FooFilter!]
  bar: StringOperationInputFilter
  baz: ComparableOperationInputOfInt64Filter
  or: [FooFilter!]
  qux: ComparableOperationInputOfInt32Filter
}

input StringOperationInputFilter {
  and: [StringOperationInputFilter!]
  contains: String
  endsWith: String
  eq: String
  gt: String
  gte: String
  in: String
  lt: String
  lte: String
  ncontains: String
  nendsWith: String
  neq: String
  ngt: String
  ngte: String
  nin: String
  nlt: String
  nlte: String
  nstartsWith: String
  or: [StringOperationInputFilter!]
  startsWith: String
}

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
